#!/usr/bin/env python
import copy
import doctest
import logging
import re
import sys


log = logging.getLogger(__name__).debug

# Part One


def part_one():
    print("Part One")

    card_subject_number = 7
    door_subject_number = 7

    card_public_key = 5764801
    door_public_key = 17807724
    card_loop_size = loop_size(card_subject_number, card_public_key)
    assert card_loop_size == 8
    door_loop_size = loop_size(door_subject_number, door_public_key)
    assert door_loop_size == 11
    assert 14897079 == encryption_key(card_loop_size, door_public_key)
    assert 14897079 == encryption_key(door_loop_size, card_public_key)
    assert 14897079 == encryption_key_from_public_keys(
        card_subject_number, card_public_key, door_subject_number, door_public_key
    )

    card_public_key, door_public_key = data[0]
    print(
        encryption_key_from_public_keys(
            card_subject_number, card_public_key, door_subject_number, door_public_key
        )
    )


def loop_size(subject_number, public_key):
    loop_size = 0
    start = 1
    while start != public_key:
        loop_size += 1
        start = transform(start, subject_number)
    return loop_size


def transform(start, subject_number):
    return (start * subject_number) % 20201227


def encryption_key(loop_size_a, public_key_b):
    start = 1
    for _ in range(loop_size_a):
        start = transform(start, subject_number=public_key_b)
    return start


def encryption_key_from_public_keys(subj_a, key_a, subj_b, key_b):
    loop_size_a = loop_size(subj_a, key_a)
    log(f"loop_size_a: {loop_size_a}")
    return encryption_key(loop_size_a, key_b)

    loop_size_b = loop_size(subj_b, key_b)
    log(f"loop_size_b: {loop_size_b}")
    return encryption_key(loop_size_b, key_a)


# Part Two


def part_two():
    print("Part Two")


# Data

data = []
data.append((16915772, 18447943))

if __name__ == "__main__":

    def main(part=None):
        if not part or part == 1:
            part_one()
        if not part or part == 2:
            part_two()

    doctest.testmod(verbose=False)
    if len(sys.argv) > 1:
        if len(sys.argv) > 2 and sys.argv[2] in ("-v", "--verbose"):
            logging.basicConfig(level=logging.DEBUG)
        main(part=int(sys.argv[1]))
    else:
        main()
