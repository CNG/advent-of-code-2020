#!/usr/bin/env python
import copy
import doctest
import logging
import sys
from itertools import product


log = logging.getLogger(__name__).debug


def main():
    print("Part One")
    assert 112 == run(data[0], cycles=6)
    print(run(data[1], cycles=6))

    print("Part Two")
    assert 848 == run(data[0], cycles=6, dimensions=4)
    print(run(data[1], cycles=6, dimensions=4))


# Part One


def neighbors(point):
    """
    Generate each point within 1 unit of point in all dimensions.
    >>> list(neighbors((4,)))
    [(3,), (5,)]
    >>> list(neighbors((0, 1)))
    [(-1, 0), (-1, 1), (-1, 2), (0, 0), (0, 2), (1, 0), (1, 1), (1, 2)]
    """
    return (p for p in product(*(range(u - 1, u + 2) for u in point)) if p != point)


# def container(points):
#     """
#     >>> points = (2, 2), (2, 3)
#     >>> result = [
#     ...     (1, 1), (1, 2), (1, 3), (1, 4),
#     ...     (2, 1), (2, 2), (2, 3), (2, 4),
#     ...     (3, 1), (3, 2), (3, 3), (3, 4),
#     ... ]
#     >>> assert list(container(points)) == result
#     """
#     return product(
#         *(
#             range(min(p[i] for p in points) - 1, max(p[i] for p in points) + 2)
#             for i in range(len(next(iter(points))))
#         )
#     )


class Grid:
    def __init__(self, initial_state, dimensions=3):
        self.state = set(
            (x, y) + tuple(0 for _ in range(dimensions - 2))
            for y, line in enumerate(initial_state.splitlines())
            for x, char in enumerate(line)
            if char == "#"  # This char represents an "active" point.
        )

    def contains(self, point):
        return point in self.state

    def advance(self, cycles=1):
        "Iterate through list of all active points and their neighbors."
        for _ in range(cycles):
            new_state = copy.deepcopy(self.state)
            for point in self.state | set(
                p for point in self.state for p in neighbors(point)
            ):
                active_neighbors = sum(1 for p in neighbors(point) if self.contains(p))
                if self.contains(point):  # currently active
                    if active_neighbors not in (2, 3):
                        new_state.remove(point)
                else:
                    if active_neighbors == 3:
                        new_state.add(point)
            self.state = new_state
            log(self.state)
        return self

    # def advance(self, cycles=1):
    #     "Iterate through each point in hypercube one unit beyond all active points."
    #     for _ in range(cycles):
    #         new_state = copy.deepcopy(self.state)
    #         for point in container(self.state):
    #             active_neighbors = len(
    #                 list(p for p in neighbors(point) if self.contains(p))
    #             )
    #             is_active = self.contains(point)
    #             if is_active and active_neighbors not in (2, 3):
    #                 new_state.remove(point)
    #             elif not is_active and active_neighbors == 3:
    #                 new_state.add(point)
    #         self.state = new_state
    #         log(self.state)
    #     return self

    def __len__(self):
        return len(self.state)


def run(data, cycles, dimensions=3):
    return len(Grid(data, dimensions=dimensions).advance(cycles))


# Part Two


# Data

data = []
data.append(
    """.#.
..#
###"""
)
data.append(
    """.##.####
.#.....#
#.###.##
#####.##
#...##.#
#######.
##.#####
.##...#."""
)


if __name__ == "__main__":
    doctest.testmod(verbose=False)
    if len(sys.argv) > 1 and sys.argv[1] in ("-v", "--verbose"):
        logging.basicConfig(level=logging.DEBUG)
    main()
