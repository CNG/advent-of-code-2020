#!/usr/bin/env python
import doctest
import copy
from collections import Counter


def parsed_numbers(data):
    return [int(line) for line in data.splitlines()]


def diffs(numbers):
    numbers += [max(numbers) + 3]  # add source and built in adapter
    prev = 0
    diffs = []
    for number in sorted(numbers):
        diffs.append(number - prev)
        prev = number
    return Counter(diffs)


def slow_combinations(numbers):
    """
    >>> slow_combinations([16, 10, 15, 5, 1, 11, 7, 19, 6, 12, 4])
    8
    """
    numbers = list(sorted(numbers + [0, max(numbers) + 3]))

    def check(numbers):
        # print(f"Checking {numbers}")
        if len(numbers) < 3:
            return
        if numbers[2] - numbers[0] <= 3:
            yield 1
            yield from check([numbers[0]] + numbers[2:])
        yield from check(numbers[1:])

    return sum(check(numbers)) + 1


def combinations(numbers):
    """
    >>> combinations([16, 10, 15, 5, 1, 11, 7, 19, 6, 12, 4])
    8
    """
    numbers = list(sorted(numbers + [0, max(numbers) + 3]))

    cache = {}

    def check(numbers):
        key = frozenset(numbers)
        if key in cache:
            return cache[key]
        result = 1
        if len(numbers) < 3:
            return result
        if numbers[2] - numbers[0] <= 3:
            result = check(numbers[1:]) + check([numbers[0]] + numbers[2:])
        else:
            result = check(numbers[1:])
        cache[key] = result
        return result

    return check(numbers)


def main(data):
    assert diffs(parsed_numbers(data[0])) == Counter({1: 7, 3: 5})
    assert diffs(parsed_numbers(data[1])) == Counter({1: 22, 3: 10})
    one, three = diffs(parsed_numbers(data[2])).values()
    assert one * three == 2046

    assert combinations(parsed_numbers(data[0])) == 8
    assert combinations(parsed_numbers(data[1])) == 19208
    print(combinations(parsed_numbers(data[2])))


data = []
# output joltage rating of each adapter
# Any given adapter can take an input 1, 2, or 3 jolts lower than its rating
data.append(
    """16
10
15
5
1
11
7
19
6
12
4"""
)
data.append(
    """28
33
18
42
31
14
46
20
48
47
24
23
49
45
19
38
39
11
1
32
25
35
8
17
7
9
4
2
34
10
3"""
)
data.append(
    """54
91
137
156
31
70
143
51
50
18
1
149
129
151
95
148
41
144
7
125
155
14
114
108
57
118
147
24
25
73
26
8
115
44
12
47
106
120
132
121
35
105
60
9
6
65
111
133
38
138
101
126
39
78
92
53
119
136
154
140
52
15
90
30
40
64
67
139
76
32
98
113
80
13
104
86
27
61
157
79
122
59
150
89
158
107
77
112
5
83
58
21
2
66"""
)

if __name__ == "__main__":
    doctest.testmod()
    main(data)
